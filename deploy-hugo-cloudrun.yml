name: Build and Deploy Hugo to Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - "Dockerfile"
      - "cloudbuild/**"
      - ".github/workflows/deploy-hugo-cloudrun.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  # ---- GCP / Artifact Registry / Cloud Run ----
  GCP_PROJECT_ID: bguk-harsha-dev-6306683
  GCP_REGION: europe-west1
  GCS_STAGING_DIR: gs://harsha-dev-cbbucket/cbcustom
  AR_REPO: hugo-dev-repo-docker
  IMAGE_NAME: hugo-server
  SERVICE_NAME: hugo-server

  # ---- Content repo (learning-pathway) ----
  CONTENT_REPO: harsha-Technical-Platform/learning-pathway   # change if different
  CONTENT_REF: main                                        # branch / tag / SHA
  BASE_URL: "https://hugo-server.dev.co.uk/"          # optional: used by Dockerfile

jobs:
  build:
    name: Build and Push Image (with learning-pathway content)
    runs-on: ubuntu-latest

    outputs:
      SHORT_SHA: ${{ steps.vars.outputs.SHORT_SHA }}

    steps:
      - name: Checkout this repo (hugo-service)
        uses: actions/checkout@v4

      - name: Create GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.LP_APP_ID }}              # GitHub App ID (integer)
          private-key: ${{ secrets.LP_APP_PRIVATE_KEY }} # PEM contents (multiline)
          owner: harsha-Technical-Platform                 # org/owner where the app is installed
          repositories: learning-pathway                 # repo(s) the token should access

      # --- Use the App token to checkout the content repo ---
      - name: Checkout learning-pathway (content + themes)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONTENT_REPO }}
          ref: ${{ env.CONTENT_REF }}
          path: learning-pathway
          token: ${{ steps.app-token.outputs.token }}

      # --- Verify learning-pathway clone succeeded ---
      - name: Verify learning-pathway clone
        run: |
          echo "Current working directory: $PWD"
          echo "Listing top-level folders:"
          ls -la
          echo "---------------------------------------"
      
          if [ -d "learning-pathway" ]; then
            echo "‚úÖ 'learning-pathway' folder exists"
            cd learning-pathway
            echo "== Git status =="
            git rev-parse --is-inside-work-tree
            git rev-parse HEAD
            git remote -v
      
            echo "== Top-level files and folders =="
            ls -la
      
            echo "== Three-level directory tree =="
            find . -maxdepth 3 -type d -print
          else
            echo "'learning-pathway' folder not found ‚Äî checkout failed!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
    
      - name: Assemble Hugo site layout
        run: |
          set -euo pipefail
          rm -rf site
          mkdir -p site

          # Copy gcp-learning/ (contains archetypes/, content/, config/hugo.toml, etc.) ‚Üí site/
          rsync -a learning-pathway/gcp-learning/ site/

          # Bring over top-level themes/ if present
          if [ -d learning-pathway/themes ]; then
            mkdir -p site/themes
            rsync -a learning-pathway/themes/ site/themes/
          fi

          echo "---- site/ tree (top-level) ----"
          find site -maxdepth 2 -type d -print | sed 's#^\./##'
          echo "---- config files present ----"
          ls -la site | egrep 'hugo\.toml|config\.toml' || true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.DIGITAL_PLATFORM_PORTAL_GCS_CREDENTIALS }}

      - name: Configure gcloud & Docker
        run: |
          gcloud config set project $GCP_PROJECT_ID
          gcloud config set compute/region $GCP_REGION
          gcloud auth configure-docker $GCP_REGION-docker.pkg.dev --quiet

      - name: Compute image tag
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & Push via Cloud Build
        run: |
          gcloud builds submit \
            --project=$GCP_PROJECT_ID \
            --region=$GCP_REGION \
            --gcs-source-staging-dir=$GCS_STAGING_DIR \
            --config=cloudbuild/cloudbuild-docker.yaml \
            --substitutions=_TAG=${{ steps.vars.outputs.SHORT_SHA }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.DIGITAL_PLATFORM_PORTAL_GCS_CREDENTIALS }}

      - name: Deploy Hugo Service to Cloud Run
        env:
          SHORT_SHA: ${{ needs.build.outputs.SHORT_SHA }}
        run: |
          IMAGE_URI="$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_ID/$AR_REPO/$IMAGE_NAME:${SHORT_SHA}"
          echo "Deploying $IMAGE_URI"

          gcloud run deploy "$SERVICE_NAME" \
            --image "$IMAGE_URI" \
            --region "$GCP_REGION" \
            --platform managed \
            --allow-unauth \
            --port 8080 \
            --cpu 1 \
            --memory 512Mi \
            --concurrency 80 \
            --timeout 300

      - name: Show Cloud Run URL
        run: |
          URL=$(gcloud run services describe "$SERVICE_NAME" --region "$GCP_REGION" --format='value(status.url)')
          echo "‚úÖ Deployed successfully"
          echo "üåç $URL"
